$schema: https://json-schema.org/draft/2020-12/schema
$id: https://example.org/schemas/mcu-clock-tree.schema.json
title: MCU Clock-Tree Specification
type: object
required:
- family
- signals
properties:
  version:
    type: string
    description: Schema/application document version (your spec version), e.g., '1.0.0'.
  family:
    type: string
    description: Marketing family or SoC series name (e.g., 'STM32H7').
  reference_manual:
    type: object
    required:
    - id
    additionalProperties: true
    properties:
      id:
        type: string
        description: Primary reference manual identifier (e.g., 'RM0399').
      devices:
        type: array
        items:
          type: string
      revision:
        type: string
      notes:
        type: array
        items:
          type: string
  metadata:
    type: object
    additionalProperties: true
  signals:
    type: array
    minItems: 1
    items:
      $ref: '#/$defs/Signal'
    description: Distinct clock signals that can be muxed/divided/gated or are sources.
  sources:
    type: array
    items:
      $ref: '#/$defs/Source'
  muxes:
    type: array
    items:
      $ref: '#/$defs/Mux'
  plls:
    type: array
    items:
      $ref: '#/$defs/Pll'
  dividers:
    type: array
    items:
      $ref: '#/$defs/Divider'
  gates:
    type: array
    items:
      $ref: '#/$defs/Gate'
$defs:
  BlockBase:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      notes:
        type: string
    required:
    - name
  Signal:
    allOf:
    - $ref: '#/$defs/BlockBase'
    - properties:
        nominal:
          type: integer
          description: Nominal clock frequency in Hz
        min:
          type: integer
          description: Minimal clock frequency in Hz
        max:
          type: integer
          description: Maximal clock frequency in Hz
  Source:
    allOf:
    - $ref: '#/$defs/BlockBase'
    - properties:
        output:
          type: string
      required:
      - output
  Mux:
    allOf:
    - $ref: '#/$defs/BlockBase'
    - properties:
        inputs:
          type: array
          items:
            type:
              - string
              - "null"
          minItems: 1
          description: Size must be a power of 2, corresponding to the bitfield width
            in the control. Position in the array must correspond to bitfield encoding.
        output:
          type: string
          description: Name of the output signal from the mux.
        control:
          $ref: '#/$defs/RegisterField'
      required:
      - inputs
      - output
  Pll:
    allOf:
    - $ref: '#/$defs/BlockBase'
    - required:
      - input
      - output
      - feedback_integer
      - vco_limits
      properties:
        input:
          type: string
          description: Clock signal feeding the PLL phase detector
        output:
          type: string
          description: Clock signal output from the PLL VCO after the post-divider
        feedback_integer:
          $ref: '#/$defs/RegisterField'
        feedback_fraction:
          $ref: '#/$defs/RegisterField'
        post_divider:
          $ref: '#/$defs/RegisterField'
        vco_limits:
          type: object
          required: [ min, max ]
          properties:
            min:
              type: integer
            max:
              type: integer
          description: Frequency range of VCO before post-divider
      description: fOut = fIn * M, where M is the feedback divider factor. M is
        formed by combining integer and (if present) fractional parts.
  Divider:
    allOf:
    - $ref: '#/$defs/BlockBase'
    - properties:
        input:
          type: string
        output:
          type: string
        factor:
          $ref: '#/$defs/RegisterField'
        denominator:
          $ref: '#/$defs/RegisterField'
        value:
          type: integer
      required:
      - input
      - output
      description: |-
        The divider factor can either be fixed, in which case it is given by the value property,
        or it can be an integer factor from a register field, or it can be a fractional value
        given by two register fields, one for the numerator (factor) and one for the denominator.

        When both register(s) and value are given, the value is an offset to be applied after
        forming the integer or fractional value from the register fields.

        If none is given, the divider doesn't divide (i.e. factor is 1)
  Gate:
    allOf:
    - $ref: '#/$defs/BlockBase'
    - properties:
        input:
          type: string
        output:
          type: string
        control:
          $ref: '#/$defs/EnableControl'
      required:
      - input
      - output
      - control
  RegisterField:
    type: object
    description: |-
      Specify bitfield in a register, and how to interpret the value.

      The register and bitfield are identified by name. If needed, there
      can also be an instance identifier to tell in which functional block
      the register can be found. How the register can be addressed and
      accessed is specified elsewhere.
    required:
    - reg
    not:
      required:
      - value_range
      - values
    properties:
      instance:
        type: string
      reg:
        type: string
      field:
        type: string
      value_range:
        type: object
        required:
        - max
        properties:
          max:
            type: integer
          min:
            type: integer
            default: 0
          offset:
            type: integer
            default: 0
          scale:
            type: integer
            default: 1
        description: value is from min to max inclusive; scale, then offset, are applied
          before writing to register field
      values:
        type: array
        items:
          type: integer
        description: value is one of a list; list index is in register field
  EnableControl:
    allOf:
    - $ref: '#/$defs/RegisterField'
    - properties:
        inverted:
          type: boolean
          default: false
      description: |-
        Register bit that can control a function that can be enabled or disabled.
        The optional inverted property specifies whether a 0 bit enables or disables.
